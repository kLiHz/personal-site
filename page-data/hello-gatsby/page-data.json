{"componentChunkName":"component---src-templates-blog-post-js","path":"/hello-gatsby/","result":{"data":{"site":{"siteMetadata":{"title":"kLiHb's Blog"}},"markdownRemark":{"id":"fe3b1427-a238-56b2-b493-8fb5d8d2ccb2","excerpt":"The very first blog built with Gatsby. 环境配置 笔者采用 WSL 2 作为开发环境. 关于 WSL 2 的使用技巧可以参见上一篇博客. 安装 nvm 和 Node.js 首先需要安装 Node.js 环境. 这里参照微软的文档 在 WSL 2 上设置 Node.js…","html":"<p>The very first blog built with Gatsby.</p>\n<h2>环境配置</h2>\n<p>笔者采用 WSL 2 作为开发环境. 关于 WSL 2 的使用技巧可以参见上一篇博客.</p>\n<h3>安装 nvm 和 Node.js</h3>\n<p>首先需要安装 <a href=\"https://nodejs.org/\">Node.js</a> 环境. 这里参照微软的文档 <a href=\"https://docs.microsoft.com/zh-cn/windows/dev-environment/javascript/nodejs-on-wsl\" title=\"在 WSL 2 上设置 Node.js | Microsoft Docs\">在 WSL 2 上设置 Node.js</a>, 即先安装 <a href=\"https://github.com/nvm-sh/nvm\">nvm</a> 用来管理 Node.js 的版本, 再通过 nvm 安装 Node.js.</p>\n<p>需要注意, 如有需要, 要先在命令行环境设置代理, 参考:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=henry data-host=localhost></span><span data-user=henry data-host=localhost></span></span><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span><span class=\"token string\">'http://172.23.112.1:7890'</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span><span class=\"token string\">'http://172.23.112.1:7890'</span></code></pre></div>\n<p>在安装好 nvm 后, 可能需要重启 bash 才能使配置的环境变量生效. 如若重启, 记得重新配置代理.</p>\n<p>笔者配置时, 使用最新的 Node.js (18.2.0) 会有问题, 切换到 LTS (16.15.0) 则没有问题.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=henry data-host=localhost></span></span>nvm <span class=\"token function\">install</span> --lts</code></pre></div>\n<h3>安装 Gatsby</h3>\n<p>在用 npm 安装 Gatsby 时, 如果所处的网络条件有问题, 需要设置代理, 则似乎还需要显式地为 npm 设置代理:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=henry data-host=localhost></span><span data-user=henry data-host=localhost></span></span><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> proxy <span class=\"token string\">'http://172.23.112.1:7890'</span>\n<span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> strict-ssl <span class=\"token boolean\">false</span></code></pre></div>\n<p>之后再 (全局) 安装 <code class=\"language-text\">gatsby-cli</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=henry data-host=localhost></span></span><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g gatsby-cli</code></pre></div>\n<h2>新建项目</h2>\n<p>开始之前, 建议先参考学习 <a href=\"https://www.gatsbyjs.com/docs/tutorial/\" title=\"Tutorial | Gatsby\">Gatsby 的教程</a>.</p>\n<h3>使用博客模板</h3>\n<p>下面的命令使用 <code class=\"language-text\">gatsby new</code> 命令, 根据 Gatsby's blog starter 的仓库新建一个项目:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=henry data-host=localhost></span></span>gatsby new gatsby-starter-blog https://github.com/gatsbyjs/gatsby-starter-blog</code></pre></div>\n<p>对模板仓库的修改过程可参见该网站源代码仓库的提交记录.</p>\n<h3>本地预览</h3>\n<p>之后, 进入对应的目录, 并开启 development server (开发服务器):</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=henry data-host=localhost></span><span data-user=henry data-host=localhost></span></span><span class=\"token builtin class-name\">cd</span> gatsby-starter-blog\ngatsby develop --host<span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0</code></pre></div>\n<p>追加 <code class=\"language-text\">--host=0.0.0.0</code> 参数使得 development server 侦听来自站外的请求, 以便能够从主机访问 WSL 2 上的 server 程序.</p>\n<h2>发布</h2>\n<p>笔者计划使用 GitHub Pages 托管页面, 而使用 GitHub Actions 实现站点的自动构建和部署, 即 \"持续集成 (Continuous Integration)\".</p>\n<h3>创建在线仓库</h3>\n<p>为了使用 GitHub Actions 实现自动构建和部署, 需要将仓库上传至 GitHub.</p>\n<p>笔者计划将该项目直接部署到 GitHub 提供给账户的二级域名下 (也被称为用户的个人页面仓库), 即 username.github.io, 对应的仓库与其同名.</p>\n<p>如果是部署在域名的子目录下, 也就是部署为账户下某一仓库的 Pages, 则需要额外的配置. 将在后面介绍.</p>\n<blockquote>\n<p>关于不同的 GitHub Pages 类型可参考 <a href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages\">About GitHub Pages - GitHub Docs</a>.</p>\n</blockquote>\n<h3>创建 PAT 并添加到仓库 secrets</h3>\n<p>仓库的自动构建和部署是通过 GitHub workflow (工作流) 实现的. 需要注意的是, 由于工作流的执行是在远程主机上, 因此为了能够成功部署页面 (将页面推送到仓库中的分支上), 该脚本需要能够访问对应的 GitHub 仓库才行, 即需要向其提供传递一个能够鉴权的凭据.</p>\n<p>可以参照 <a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\" title=\"Creating a personal access token - GitHub Docs\">Creating a personal access token</a> 创建一个具有仓库 (<code class=\"language-text\">repo</code>) 访问权限的 \"个人访问凭据 (Personal Access Token)\", 并将其添加到仓库的 \"Secrets\" 中.</p>\n<p>在本例中, 即为添加一个名为 <code class=\"language-text\">ACCESS_TOKEN</code> 的 secret 到仓库的 Actions secrets 中, 其值为上一步中创建的 PAT.</p>\n<p>在 Actions 运行时, 仓库用于 Actions 的环境变量密钥 (Environment secrets) 和仓库访问密钥 (Repositoy secrets) 将会传递过去, 使得 Actions 能够对仓库进行修改.</p>\n<h3>创建工作流</h3>\n<p>之后, 需要为仓库新建一个负责构建和部署的工作流. 创建工作流的过程可以在仓库的 GitHub 页面上进行. 也就是在仓库的根目录下新建一个 <code class=\"language-text\">.github/workflows/build.yml</code> 文件 (文件名无特殊要求).</p>\n<p>在工作流中, 笔者调用了 <a href=\"https://github.com/enriikke/gatsby-gh-pages-action\" title=\"Gatsby Publish: GitHub Action to build and deploy your Gatsby site to GitHub Pages ❤️🎩\">enriikke/gatsby-gh-pages-action</a> 这一 GitHub Action, 其将会在仓库根目录下执行 <code class=\"language-text\">gatsby build</code>, 并将其部署到 GitHub Pages.</p>\n<!-- 为了支持 `npm` 和 `yarn`, 该 GitHub Action 需要 `package.json` 中定义了 `build` 脚本. 不过, 使用 `gatsby new` 创建项目时, Gatsby 将会自动定义该脚本为调用 `gatsby build`. -->\n<p>文件的内容 (使用方式) 类似如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># 工作流的名称</span>\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Gatsby Build &amp; Publish\n\n<span class=\"token comment\"># 控制该工作流何时被执行</span>\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 仅在 main 分支上发生 push 时被触发</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> main <span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 一个工作流由多个可以串行或并行的工作 (jobs) 组成</span>\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 该工作流仅包含一个名为 \"build\" 的 job</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 指定将执行该工作的执行者的类型</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n\n    <span class=\"token comment\"># 阶段 (steps) 表示该工作 (job) 下一系列将被执行的任务 (tasks)</span>\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 将该仓库签出 (check out) 在 $GITHUB_WORKSPACE 指定的目录下,</span>\n      <span class=\"token comment\"># 以便被工作 (job) 访问</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v1\n      \n      <span class=\"token comment\"># 调用 enriikke/gatsby-gh-pages-action</span>\n      <span class=\"token comment\"># 进行页面的构建和部署</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> enriikke/gatsby<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages<span class=\"token punctuation\">-</span>action@v2\n        <span class=\"token comment\"># 指定传递给该 Action 的参数</span>\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># 使用的访问权限口令</span>\n          <span class=\"token key atrule\">access-token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.ACCESS_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token comment\"># 待部署的分支名</span>\n          <span class=\"token key atrule\">deploy-branch</span><span class=\"token punctuation\">:</span> gh<span class=\"token punctuation\">-</span>pages</code></pre></div>\n<p>如果是在网页上进行的工作流的创建, 保存 (提交或合并到 <code class=\"language-text\">main</code> 分支) 之后, 将会触发该工作流. 如果是在本地编辑后推送到远端仓库应当同理.</p>\n<h3>部署到 GitHub Pages</h3>\n<p>该工作流将会在构建完成后, 将结果输出到 <code class=\"language-text\">gh-pages</code> 分支. 等待执行完毕后, 可以在仓库的 <code class=\"language-text\">gh-pages</code> 分支下查看到对应的结果.</p>\n<p>同时需要进入仓库设置页的 \"Pages\" 下, 确保将发布源设置为工作流将构建产物所部署到的 <code class=\"language-text\">gh-pages</code> 分支.</p>\n<p>GitHub 默认使用 Jekyll 根据指定的发布源进行构建. 因此, 用户自定义的页面构建 CI 通常会将内容发布在 <code class=\"language-text\">gh-pages</code> 分支上, 并在根目录下写入一个 <code class=\"language-text\">.nojekyll</code> 文件, 以便 GitHub 不再对这些内容进行处理; 之后, GitHub 会将分支上的内容打包, 完成 <strong>最终</strong> 的部署. 这也是为什么仓库的 Actions 页面实际上会多出来一个名为 \"pages build and deployment\" 的 workflow 的原因.</p>\n<p>可以参考 <a href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site\" title=\"Configuring a publishing source for your GitHub Pages site - GitHub Docs\">配置 GitHub Pages 站点的发布源</a>.</p>\n<h3>部署到子目录下</h3>\n<p>需要注意, 如果是部署在域名的子目录下 (也就是账户下仓库开启 GitHub Pages 后所对应的页面地址), 则需要进行相应的配置.</p>\n<p>首先在项目根目录的 <code class=\"language-text\">gatsby-config.js</code> 中添加如下的配置 (即指定路径前缀):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">pathPrefix</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/reponame\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>并在调用 <a href=\"https://github.com/enriikke/gatsby-gh-pages-action\" title=\"Gatsby Publish: GitHub Action to build and deploy your Gatsby site to GitHub Pages ❤️🎩\">enriikke/gatsby-gh-pages-action</a> 时, 选择传递 <code class=\"language-text\">--prefix-paths</code> 参数给 Gatsby.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Gatsby Build &amp; Publish\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> main <span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v1\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> enriikke/gatsby<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages<span class=\"token punctuation\">-</span>action@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">access-token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.ACCESS_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">deploy-branch</span><span class=\"token punctuation\">:</span> gh<span class=\"token punctuation\">-</span>pages\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token key atrule\">gatsby-args</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>prefix<span class=\"token punctuation\">-</span>paths</span></code></pre></div>","frontmatter":{"title":"Hello, Gatsby!","date":"May 23, 2022","description":"包含一些 Gatsby 的配置记录."}},"previous":{"fields":{"slug":"/working-with-wsl-2/"},"frontmatter":{"title":"使用 WSL 2 进行工作"}},"next":null},"pageContext":{"id":"fe3b1427-a238-56b2-b493-8fb5d8d2ccb2","previousPostId":"4fbac9c9-ef8f-502e-8202-07507e118389","nextPostId":null}},"staticQueryHashes":["2841359383","4049601996"]}